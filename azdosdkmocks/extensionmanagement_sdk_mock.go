// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/azure-devops-go-api/azuredevops/v7/extensionmanagement (interfaces: Client)

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	reflect "reflect"

	extensionmanagement "github.com/microsoft/azure-devops-go-api/azuredevops/v7/extensionmanagement"
	gomock "go.uber.org/mock/gomock"
)

// MockExtensionmanagementClient is a mock of Client interface.
type MockExtensionmanagementClient struct {
	ctrl     *gomock.Controller
	recorder *MockExtensionmanagementClientMockRecorder
	isgomock struct{}
}

// MockExtensionmanagementClientMockRecorder is the mock recorder for MockExtensionmanagementClient.
type MockExtensionmanagementClientMockRecorder struct {
	mock *MockExtensionmanagementClient
}

// NewMockExtensionmanagementClient creates a new mock instance.
func NewMockExtensionmanagementClient(ctrl *gomock.Controller) *MockExtensionmanagementClient {
	mock := &MockExtensionmanagementClient{ctrl: ctrl}
	mock.recorder = &MockExtensionmanagementClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtensionmanagementClient) EXPECT() *MockExtensionmanagementClientMockRecorder {
	return m.recorder
}

// GetInstalledExtensionByName mocks base method.
func (m *MockExtensionmanagementClient) GetInstalledExtensionByName(arg0 context.Context, arg1 extensionmanagement.GetInstalledExtensionByNameArgs) (*extensionmanagement.InstalledExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledExtensionByName", arg0, arg1)
	ret0, _ := ret[0].(*extensionmanagement.InstalledExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalledExtensionByName indicates an expected call of GetInstalledExtensionByName.
func (mr *MockExtensionmanagementClientMockRecorder) GetInstalledExtensionByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledExtensionByName", reflect.TypeOf((*MockExtensionmanagementClient)(nil).GetInstalledExtensionByName), arg0, arg1)
}

// GetInstalledExtensions mocks base method.
func (m *MockExtensionmanagementClient) GetInstalledExtensions(arg0 context.Context, arg1 extensionmanagement.GetInstalledExtensionsArgs) (*[]extensionmanagement.InstalledExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledExtensions", arg0, arg1)
	ret0, _ := ret[0].(*[]extensionmanagement.InstalledExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalledExtensions indicates an expected call of GetInstalledExtensions.
func (mr *MockExtensionmanagementClientMockRecorder) GetInstalledExtensions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledExtensions", reflect.TypeOf((*MockExtensionmanagementClient)(nil).GetInstalledExtensions), arg0, arg1)
}

// InstallExtensionByName mocks base method.
func (m *MockExtensionmanagementClient) InstallExtensionByName(arg0 context.Context, arg1 extensionmanagement.InstallExtensionByNameArgs) (*extensionmanagement.InstalledExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallExtensionByName", arg0, arg1)
	ret0, _ := ret[0].(*extensionmanagement.InstalledExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallExtensionByName indicates an expected call of InstallExtensionByName.
func (mr *MockExtensionmanagementClientMockRecorder) InstallExtensionByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallExtensionByName", reflect.TypeOf((*MockExtensionmanagementClient)(nil).InstallExtensionByName), arg0, arg1)
}

// UninstallExtensionByName mocks base method.
func (m *MockExtensionmanagementClient) UninstallExtensionByName(arg0 context.Context, arg1 extensionmanagement.UninstallExtensionByNameArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallExtensionByName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallExtensionByName indicates an expected call of UninstallExtensionByName.
func (mr *MockExtensionmanagementClientMockRecorder) UninstallExtensionByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallExtensionByName", reflect.TypeOf((*MockExtensionmanagementClient)(nil).UninstallExtensionByName), arg0, arg1)
}

// UpdateInstalledExtension mocks base method.
func (m *MockExtensionmanagementClient) UpdateInstalledExtension(arg0 context.Context, arg1 extensionmanagement.UpdateInstalledExtensionArgs) (*extensionmanagement.InstalledExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstalledExtension", arg0, arg1)
	ret0, _ := ret[0].(*extensionmanagement.InstalledExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstalledExtension indicates an expected call of UpdateInstalledExtension.
func (mr *MockExtensionmanagementClientMockRecorder) UpdateInstalledExtension(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstalledExtension", reflect.TypeOf((*MockExtensionmanagementClient)(nil).UpdateInstalledExtension), arg0, arg1)
}
