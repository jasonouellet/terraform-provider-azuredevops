// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/azure-devops-go-api/azuredevops/v7/gallery (interfaces: Client)

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gallery "github.com/microsoft/azure-devops-go-api/azuredevops/v7/gallery"
	gomock "go.uber.org/mock/gomock"
)

// MockGalleryClient is a mock of Client interface.
type MockGalleryClient struct {
	ctrl     *gomock.Controller
	recorder *MockGalleryClientMockRecorder
	isgomock struct{}
}

// MockGalleryClientMockRecorder is the mock recorder for MockGalleryClient.
type MockGalleryClientMockRecorder struct {
	mock *MockGalleryClient
}

// NewMockGalleryClient creates a new mock instance.
func NewMockGalleryClient(ctrl *gomock.Controller) *MockGalleryClient {
	mock := &MockGalleryClient{ctrl: ctrl}
	mock.recorder = &MockGalleryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGalleryClient) EXPECT() *MockGalleryClientMockRecorder {
	return m.recorder
}

// AddAssetForEditExtensionDraft mocks base method.
func (m *MockGalleryClient) AddAssetForEditExtensionDraft(arg0 context.Context, arg1 gallery.AddAssetForEditExtensionDraftArgs) (*gallery.ExtensionDraftAsset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAssetForEditExtensionDraft", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionDraftAsset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAssetForEditExtensionDraft indicates an expected call of AddAssetForEditExtensionDraft.
func (mr *MockGalleryClientMockRecorder) AddAssetForEditExtensionDraft(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAssetForEditExtensionDraft", reflect.TypeOf((*MockGalleryClient)(nil).AddAssetForEditExtensionDraft), arg0, arg1)
}

// AddAssetForNewExtensionDraft mocks base method.
func (m *MockGalleryClient) AddAssetForNewExtensionDraft(arg0 context.Context, arg1 gallery.AddAssetForNewExtensionDraftArgs) (*gallery.ExtensionDraftAsset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAssetForNewExtensionDraft", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionDraftAsset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAssetForNewExtensionDraft indicates an expected call of AddAssetForNewExtensionDraft.
func (mr *MockGalleryClientMockRecorder) AddAssetForNewExtensionDraft(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAssetForNewExtensionDraft", reflect.TypeOf((*MockGalleryClient)(nil).AddAssetForNewExtensionDraft), arg0, arg1)
}

// AssociateAzurePublisher mocks base method.
func (m *MockGalleryClient) AssociateAzurePublisher(arg0 context.Context, arg1 gallery.AssociateAzurePublisherArgs) (*gallery.AzurePublisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateAzurePublisher", arg0, arg1)
	ret0, _ := ret[0].(*gallery.AzurePublisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateAzurePublisher indicates an expected call of AssociateAzurePublisher.
func (mr *MockGalleryClientMockRecorder) AssociateAzurePublisher(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateAzurePublisher", reflect.TypeOf((*MockGalleryClient)(nil).AssociateAzurePublisher), arg0, arg1)
}

// CreateCategory mocks base method.
func (m *MockGalleryClient) CreateCategory(arg0 context.Context, arg1 gallery.CreateCategoryArgs) (*gallery.ExtensionCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockGalleryClientMockRecorder) CreateCategory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockGalleryClient)(nil).CreateCategory), arg0, arg1)
}

// CreateDraftForEditExtension mocks base method.
func (m *MockGalleryClient) CreateDraftForEditExtension(arg0 context.Context, arg1 gallery.CreateDraftForEditExtensionArgs) (*gallery.ExtensionDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDraftForEditExtension", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDraftForEditExtension indicates an expected call of CreateDraftForEditExtension.
func (mr *MockGalleryClientMockRecorder) CreateDraftForEditExtension(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraftForEditExtension", reflect.TypeOf((*MockGalleryClient)(nil).CreateDraftForEditExtension), arg0, arg1)
}

// CreateDraftForNewExtension mocks base method.
func (m *MockGalleryClient) CreateDraftForNewExtension(arg0 context.Context, arg1 gallery.CreateDraftForNewExtensionArgs) (*gallery.ExtensionDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDraftForNewExtension", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDraftForNewExtension indicates an expected call of CreateDraftForNewExtension.
func (mr *MockGalleryClientMockRecorder) CreateDraftForNewExtension(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraftForNewExtension", reflect.TypeOf((*MockGalleryClient)(nil).CreateDraftForNewExtension), arg0, arg1)
}

// CreateExtension mocks base method.
func (m *MockGalleryClient) CreateExtension(arg0 context.Context, arg1 gallery.CreateExtensionArgs) (*gallery.PublishedExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtension", arg0, arg1)
	ret0, _ := ret[0].(*gallery.PublishedExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtension indicates an expected call of CreateExtension.
func (mr *MockGalleryClientMockRecorder) CreateExtension(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtension", reflect.TypeOf((*MockGalleryClient)(nil).CreateExtension), arg0, arg1)
}

// CreateExtensionWithPublisher mocks base method.
func (m *MockGalleryClient) CreateExtensionWithPublisher(arg0 context.Context, arg1 gallery.CreateExtensionWithPublisherArgs) (*gallery.PublishedExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExtensionWithPublisher", arg0, arg1)
	ret0, _ := ret[0].(*gallery.PublishedExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExtensionWithPublisher indicates an expected call of CreateExtensionWithPublisher.
func (mr *MockGalleryClientMockRecorder) CreateExtensionWithPublisher(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtensionWithPublisher", reflect.TypeOf((*MockGalleryClient)(nil).CreateExtensionWithPublisher), arg0, arg1)
}

// CreatePublisher mocks base method.
func (m *MockGalleryClient) CreatePublisher(arg0 context.Context, arg1 gallery.CreatePublisherArgs) (*gallery.Publisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublisher", arg0, arg1)
	ret0, _ := ret[0].(*gallery.Publisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublisher indicates an expected call of CreatePublisher.
func (mr *MockGalleryClientMockRecorder) CreatePublisher(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublisher", reflect.TypeOf((*MockGalleryClient)(nil).CreatePublisher), arg0, arg1)
}

// CreateQuestion mocks base method.
func (m *MockGalleryClient) CreateQuestion(arg0 context.Context, arg1 gallery.CreateQuestionArgs) (*gallery.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestion", arg0, arg1)
	ret0, _ := ret[0].(*gallery.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuestion indicates an expected call of CreateQuestion.
func (mr *MockGalleryClientMockRecorder) CreateQuestion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestion", reflect.TypeOf((*MockGalleryClient)(nil).CreateQuestion), arg0, arg1)
}

// CreateResponse mocks base method.
func (m *MockGalleryClient) CreateResponse(arg0 context.Context, arg1 gallery.CreateResponseArgs) (*gallery.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResponse", arg0, arg1)
	ret0, _ := ret[0].(*gallery.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResponse indicates an expected call of CreateResponse.
func (mr *MockGalleryClientMockRecorder) CreateResponse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResponse", reflect.TypeOf((*MockGalleryClient)(nil).CreateResponse), arg0, arg1)
}

// CreateReview mocks base method.
func (m *MockGalleryClient) CreateReview(arg0 context.Context, arg1 gallery.CreateReviewArgs) (*gallery.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0, arg1)
	ret0, _ := ret[0].(*gallery.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockGalleryClientMockRecorder) CreateReview(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockGalleryClient)(nil).CreateReview), arg0, arg1)
}

// CreateSupportRequest mocks base method.
func (m *MockGalleryClient) CreateSupportRequest(arg0 context.Context, arg1 gallery.CreateSupportRequestArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSupportRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSupportRequest indicates an expected call of CreateSupportRequest.
func (mr *MockGalleryClientMockRecorder) CreateSupportRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSupportRequest", reflect.TypeOf((*MockGalleryClient)(nil).CreateSupportRequest), arg0, arg1)
}

// DeleteExtension mocks base method.
func (m *MockGalleryClient) DeleteExtension(arg0 context.Context, arg1 gallery.DeleteExtensionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExtension", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExtension indicates an expected call of DeleteExtension.
func (mr *MockGalleryClientMockRecorder) DeleteExtension(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtension", reflect.TypeOf((*MockGalleryClient)(nil).DeleteExtension), arg0, arg1)
}

// DeleteExtensionById mocks base method.
func (m *MockGalleryClient) DeleteExtensionById(arg0 context.Context, arg1 gallery.DeleteExtensionByIdArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExtensionById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExtensionById indicates an expected call of DeleteExtensionById.
func (mr *MockGalleryClientMockRecorder) DeleteExtensionById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtensionById", reflect.TypeOf((*MockGalleryClient)(nil).DeleteExtensionById), arg0, arg1)
}

// DeletePublisher mocks base method.
func (m *MockGalleryClient) DeletePublisher(arg0 context.Context, arg1 gallery.DeletePublisherArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublisher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublisher indicates an expected call of DeletePublisher.
func (mr *MockGalleryClientMockRecorder) DeletePublisher(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublisher", reflect.TypeOf((*MockGalleryClient)(nil).DeletePublisher), arg0, arg1)
}

// DeletePublisherAsset mocks base method.
func (m *MockGalleryClient) DeletePublisherAsset(arg0 context.Context, arg1 gallery.DeletePublisherAssetArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublisherAsset", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublisherAsset indicates an expected call of DeletePublisherAsset.
func (mr *MockGalleryClientMockRecorder) DeletePublisherAsset(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublisherAsset", reflect.TypeOf((*MockGalleryClient)(nil).DeletePublisherAsset), arg0, arg1)
}

// DeleteQuestion mocks base method.
func (m *MockGalleryClient) DeleteQuestion(arg0 context.Context, arg1 gallery.DeleteQuestionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockGalleryClientMockRecorder) DeleteQuestion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockGalleryClient)(nil).DeleteQuestion), arg0, arg1)
}

// DeleteResponse mocks base method.
func (m *MockGalleryClient) DeleteResponse(arg0 context.Context, arg1 gallery.DeleteResponseArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResponse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResponse indicates an expected call of DeleteResponse.
func (mr *MockGalleryClientMockRecorder) DeleteResponse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResponse", reflect.TypeOf((*MockGalleryClient)(nil).DeleteResponse), arg0, arg1)
}

// DeleteReview mocks base method.
func (m *MockGalleryClient) DeleteReview(arg0 context.Context, arg1 gallery.DeleteReviewArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockGalleryClientMockRecorder) DeleteReview(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockGalleryClient)(nil).DeleteReview), arg0, arg1)
}

// ExtensionValidator mocks base method.
func (m *MockGalleryClient) ExtensionValidator(arg0 context.Context, arg1 gallery.ExtensionValidatorArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionValidator", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtensionValidator indicates an expected call of ExtensionValidator.
func (mr *MockGalleryClientMockRecorder) ExtensionValidator(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionValidator", reflect.TypeOf((*MockGalleryClient)(nil).ExtensionValidator), arg0, arg1)
}

// FetchDomainToken mocks base method.
func (m *MockGalleryClient) FetchDomainToken(arg0 context.Context, arg1 gallery.FetchDomainTokenArgs) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDomainToken", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDomainToken indicates an expected call of FetchDomainToken.
func (mr *MockGalleryClientMockRecorder) FetchDomainToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDomainToken", reflect.TypeOf((*MockGalleryClient)(nil).FetchDomainToken), arg0, arg1)
}

// GenerateKey mocks base method.
func (m *MockGalleryClient) GenerateKey(arg0 context.Context, arg1 gallery.GenerateKeyArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateKey indicates an expected call of GenerateKey.
func (mr *MockGalleryClientMockRecorder) GenerateKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKey", reflect.TypeOf((*MockGalleryClient)(nil).GenerateKey), arg0, arg1)
}

// GetAcquisitionOptions mocks base method.
func (m *MockGalleryClient) GetAcquisitionOptions(arg0 context.Context, arg1 gallery.GetAcquisitionOptionsArgs) (*gallery.AcquisitionOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAcquisitionOptions", arg0, arg1)
	ret0, _ := ret[0].(*gallery.AcquisitionOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAcquisitionOptions indicates an expected call of GetAcquisitionOptions.
func (mr *MockGalleryClientMockRecorder) GetAcquisitionOptions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAcquisitionOptions", reflect.TypeOf((*MockGalleryClient)(nil).GetAcquisitionOptions), arg0, arg1)
}

// GetAsset mocks base method.
func (m *MockGalleryClient) GetAsset(arg0 context.Context, arg1 gallery.GetAssetArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsset", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsset indicates an expected call of GetAsset.
func (mr *MockGalleryClientMockRecorder) GetAsset(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsset", reflect.TypeOf((*MockGalleryClient)(nil).GetAsset), arg0, arg1)
}

// GetAssetAuthenticated mocks base method.
func (m *MockGalleryClient) GetAssetAuthenticated(arg0 context.Context, arg1 gallery.GetAssetAuthenticatedArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetAuthenticated", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetAuthenticated indicates an expected call of GetAssetAuthenticated.
func (mr *MockGalleryClientMockRecorder) GetAssetAuthenticated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetAuthenticated", reflect.TypeOf((*MockGalleryClient)(nil).GetAssetAuthenticated), arg0, arg1)
}

// GetAssetByName mocks base method.
func (m *MockGalleryClient) GetAssetByName(arg0 context.Context, arg1 gallery.GetAssetByNameArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetByName", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetByName indicates an expected call of GetAssetByName.
func (mr *MockGalleryClientMockRecorder) GetAssetByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetByName", reflect.TypeOf((*MockGalleryClient)(nil).GetAssetByName), arg0, arg1)
}

// GetAssetFromEditExtensionDraft mocks base method.
func (m *MockGalleryClient) GetAssetFromEditExtensionDraft(arg0 context.Context, arg1 gallery.GetAssetFromEditExtensionDraftArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetFromEditExtensionDraft", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetFromEditExtensionDraft indicates an expected call of GetAssetFromEditExtensionDraft.
func (mr *MockGalleryClientMockRecorder) GetAssetFromEditExtensionDraft(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetFromEditExtensionDraft", reflect.TypeOf((*MockGalleryClient)(nil).GetAssetFromEditExtensionDraft), arg0, arg1)
}

// GetAssetFromNewExtensionDraft mocks base method.
func (m *MockGalleryClient) GetAssetFromNewExtensionDraft(arg0 context.Context, arg1 gallery.GetAssetFromNewExtensionDraftArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetFromNewExtensionDraft", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetFromNewExtensionDraft indicates an expected call of GetAssetFromNewExtensionDraft.
func (mr *MockGalleryClientMockRecorder) GetAssetFromNewExtensionDraft(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetFromNewExtensionDraft", reflect.TypeOf((*MockGalleryClient)(nil).GetAssetFromNewExtensionDraft), arg0, arg1)
}

// GetAssetWithToken mocks base method.
func (m *MockGalleryClient) GetAssetWithToken(arg0 context.Context, arg1 gallery.GetAssetWithTokenArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetWithToken", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetWithToken indicates an expected call of GetAssetWithToken.
func (mr *MockGalleryClientMockRecorder) GetAssetWithToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetWithToken", reflect.TypeOf((*MockGalleryClient)(nil).GetAssetWithToken), arg0, arg1)
}

// GetCategories mocks base method.
func (m *MockGalleryClient) GetCategories(arg0 context.Context, arg1 gallery.GetCategoriesArgs) (*[]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", arg0, arg1)
	ret0, _ := ret[0].(*[]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockGalleryClientMockRecorder) GetCategories(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockGalleryClient)(nil).GetCategories), arg0, arg1)
}

// GetCategoryDetails mocks base method.
func (m *MockGalleryClient) GetCategoryDetails(arg0 context.Context, arg1 gallery.GetCategoryDetailsArgs) (*gallery.CategoriesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryDetails", arg0, arg1)
	ret0, _ := ret[0].(*gallery.CategoriesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryDetails indicates an expected call of GetCategoryDetails.
func (mr *MockGalleryClientMockRecorder) GetCategoryDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryDetails", reflect.TypeOf((*MockGalleryClient)(nil).GetCategoryDetails), arg0, arg1)
}

// GetCategoryTree mocks base method.
func (m *MockGalleryClient) GetCategoryTree(arg0 context.Context, arg1 gallery.GetCategoryTreeArgs) (*gallery.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryTree", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryTree indicates an expected call of GetCategoryTree.
func (mr *MockGalleryClientMockRecorder) GetCategoryTree(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryTree", reflect.TypeOf((*MockGalleryClient)(nil).GetCategoryTree), arg0, arg1)
}

// GetCertificate mocks base method.
func (m *MockGalleryClient) GetCertificate(arg0 context.Context, arg1 gallery.GetCertificateArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockGalleryClientMockRecorder) GetCertificate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockGalleryClient)(nil).GetCertificate), arg0, arg1)
}

// GetContentVerificationLog mocks base method.
func (m *MockGalleryClient) GetContentVerificationLog(arg0 context.Context, arg1 gallery.GetContentVerificationLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentVerificationLog", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentVerificationLog indicates an expected call of GetContentVerificationLog.
func (mr *MockGalleryClientMockRecorder) GetContentVerificationLog(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentVerificationLog", reflect.TypeOf((*MockGalleryClient)(nil).GetContentVerificationLog), arg0, arg1)
}

// GetExtension mocks base method.
func (m *MockGalleryClient) GetExtension(arg0 context.Context, arg1 gallery.GetExtensionArgs) (*gallery.PublishedExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtension", arg0, arg1)
	ret0, _ := ret[0].(*gallery.PublishedExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtension indicates an expected call of GetExtension.
func (mr *MockGalleryClientMockRecorder) GetExtension(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtension", reflect.TypeOf((*MockGalleryClient)(nil).GetExtension), arg0, arg1)
}

// GetExtensionById mocks base method.
func (m *MockGalleryClient) GetExtensionById(arg0 context.Context, arg1 gallery.GetExtensionByIdArgs) (*gallery.PublishedExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionById", arg0, arg1)
	ret0, _ := ret[0].(*gallery.PublishedExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionById indicates an expected call of GetExtensionById.
func (mr *MockGalleryClientMockRecorder) GetExtensionById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionById", reflect.TypeOf((*MockGalleryClient)(nil).GetExtensionById), arg0, arg1)
}

// GetExtensionDailyStats mocks base method.
func (m *MockGalleryClient) GetExtensionDailyStats(arg0 context.Context, arg1 gallery.GetExtensionDailyStatsArgs) (*gallery.ExtensionDailyStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionDailyStats", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionDailyStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionDailyStats indicates an expected call of GetExtensionDailyStats.
func (mr *MockGalleryClientMockRecorder) GetExtensionDailyStats(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionDailyStats", reflect.TypeOf((*MockGalleryClient)(nil).GetExtensionDailyStats), arg0, arg1)
}

// GetExtensionDailyStatsAnonymous mocks base method.
func (m *MockGalleryClient) GetExtensionDailyStatsAnonymous(arg0 context.Context, arg1 gallery.GetExtensionDailyStatsAnonymousArgs) (*gallery.ExtensionDailyStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionDailyStatsAnonymous", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionDailyStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionDailyStatsAnonymous indicates an expected call of GetExtensionDailyStatsAnonymous.
func (mr *MockGalleryClientMockRecorder) GetExtensionDailyStatsAnonymous(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionDailyStatsAnonymous", reflect.TypeOf((*MockGalleryClient)(nil).GetExtensionDailyStatsAnonymous), arg0, arg1)
}

// GetExtensionEvents mocks base method.
func (m *MockGalleryClient) GetExtensionEvents(arg0 context.Context, arg1 gallery.GetExtensionEventsArgs) (*gallery.ExtensionEvents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionEvents", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionEvents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionEvents indicates an expected call of GetExtensionEvents.
func (mr *MockGalleryClientMockRecorder) GetExtensionEvents(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionEvents", reflect.TypeOf((*MockGalleryClient)(nil).GetExtensionEvents), arg0, arg1)
}

// GetExtensionReports mocks base method.
func (m *MockGalleryClient) GetExtensionReports(arg0 context.Context, arg1 gallery.GetExtensionReportsArgs) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtensionReports", arg0, arg1)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtensionReports indicates an expected call of GetExtensionReports.
func (mr *MockGalleryClientMockRecorder) GetExtensionReports(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtensionReports", reflect.TypeOf((*MockGalleryClient)(nil).GetExtensionReports), arg0, arg1)
}

// GetGalleryUserSettings mocks base method.
func (m *MockGalleryClient) GetGalleryUserSettings(arg0 context.Context, arg1 gallery.GetGalleryUserSettingsArgs) (*map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGalleryUserSettings", arg0, arg1)
	ret0, _ := ret[0].(*map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGalleryUserSettings indicates an expected call of GetGalleryUserSettings.
func (mr *MockGalleryClientMockRecorder) GetGalleryUserSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGalleryUserSettings", reflect.TypeOf((*MockGalleryClient)(nil).GetGalleryUserSettings), arg0, arg1)
}

// GetPackage mocks base method.
func (m *MockGalleryClient) GetPackage(arg0 context.Context, arg1 gallery.GetPackageArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackage", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockGalleryClientMockRecorder) GetPackage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*MockGalleryClient)(nil).GetPackage), arg0, arg1)
}

// GetPublisher mocks base method.
func (m *MockGalleryClient) GetPublisher(arg0 context.Context, arg1 gallery.GetPublisherArgs) (*gallery.Publisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublisher", arg0, arg1)
	ret0, _ := ret[0].(*gallery.Publisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublisher indicates an expected call of GetPublisher.
func (mr *MockGalleryClientMockRecorder) GetPublisher(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublisher", reflect.TypeOf((*MockGalleryClient)(nil).GetPublisher), arg0, arg1)
}

// GetPublisherAsset mocks base method.
func (m *MockGalleryClient) GetPublisherAsset(arg0 context.Context, arg1 gallery.GetPublisherAssetArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublisherAsset", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublisherAsset indicates an expected call of GetPublisherAsset.
func (mr *MockGalleryClientMockRecorder) GetPublisherAsset(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublisherAsset", reflect.TypeOf((*MockGalleryClient)(nil).GetPublisherAsset), arg0, arg1)
}

// GetPublisherWithoutToken mocks base method.
func (m *MockGalleryClient) GetPublisherWithoutToken(arg0 context.Context, arg1 gallery.GetPublisherWithoutTokenArgs) (*gallery.Publisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublisherWithoutToken", arg0, arg1)
	ret0, _ := ret[0].(*gallery.Publisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublisherWithoutToken indicates an expected call of GetPublisherWithoutToken.
func (mr *MockGalleryClientMockRecorder) GetPublisherWithoutToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublisherWithoutToken", reflect.TypeOf((*MockGalleryClient)(nil).GetPublisherWithoutToken), arg0, arg1)
}

// GetQuestions mocks base method.
func (m *MockGalleryClient) GetQuestions(arg0 context.Context, arg1 gallery.GetQuestionsArgs) (*gallery.QuestionsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions", arg0, arg1)
	ret0, _ := ret[0].(*gallery.QuestionsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockGalleryClientMockRecorder) GetQuestions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockGalleryClient)(nil).GetQuestions), arg0, arg1)
}

// GetReviews mocks base method.
func (m *MockGalleryClient) GetReviews(arg0 context.Context, arg1 gallery.GetReviewsArgs) (*gallery.ReviewsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviews", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ReviewsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviews indicates an expected call of GetReviews.
func (mr *MockGalleryClientMockRecorder) GetReviews(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviews", reflect.TypeOf((*MockGalleryClient)(nil).GetReviews), arg0, arg1)
}

// GetReviewsSummary mocks base method.
func (m *MockGalleryClient) GetReviewsSummary(arg0 context.Context, arg1 gallery.GetReviewsSummaryArgs) (*gallery.ReviewSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsSummary", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ReviewSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsSummary indicates an expected call of GetReviewsSummary.
func (mr *MockGalleryClientMockRecorder) GetReviewsSummary(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsSummary", reflect.TypeOf((*MockGalleryClient)(nil).GetReviewsSummary), arg0, arg1)
}

// GetRootCategories mocks base method.
func (m *MockGalleryClient) GetRootCategories(arg0 context.Context, arg1 gallery.GetRootCategoriesArgs) (*gallery.ProductCategoriesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootCategories", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ProductCategoriesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootCategories indicates an expected call of GetRootCategories.
func (mr *MockGalleryClientMockRecorder) GetRootCategories(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootCategories", reflect.TypeOf((*MockGalleryClient)(nil).GetRootCategories), arg0, arg1)
}

// GetSigningKey mocks base method.
func (m *MockGalleryClient) GetSigningKey(arg0 context.Context, arg1 gallery.GetSigningKeyArgs) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSigningKey", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSigningKey indicates an expected call of GetSigningKey.
func (mr *MockGalleryClientMockRecorder) GetSigningKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigningKey", reflect.TypeOf((*MockGalleryClient)(nil).GetSigningKey), arg0, arg1)
}

// GetVerificationLog mocks base method.
func (m *MockGalleryClient) GetVerificationLog(arg0 context.Context, arg1 gallery.GetVerificationLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationLog", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationLog indicates an expected call of GetVerificationLog.
func (mr *MockGalleryClientMockRecorder) GetVerificationLog(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationLog", reflect.TypeOf((*MockGalleryClient)(nil).GetVerificationLog), arg0, arg1)
}

// IncrementExtensionDailyStat mocks base method.
func (m *MockGalleryClient) IncrementExtensionDailyStat(arg0 context.Context, arg1 gallery.IncrementExtensionDailyStatArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementExtensionDailyStat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementExtensionDailyStat indicates an expected call of IncrementExtensionDailyStat.
func (mr *MockGalleryClientMockRecorder) IncrementExtensionDailyStat(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementExtensionDailyStat", reflect.TypeOf((*MockGalleryClient)(nil).IncrementExtensionDailyStat), arg0, arg1)
}

// PerformEditExtensionDraftOperation mocks base method.
func (m *MockGalleryClient) PerformEditExtensionDraftOperation(arg0 context.Context, arg1 gallery.PerformEditExtensionDraftOperationArgs) (*gallery.ExtensionDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformEditExtensionDraftOperation", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformEditExtensionDraftOperation indicates an expected call of PerformEditExtensionDraftOperation.
func (mr *MockGalleryClientMockRecorder) PerformEditExtensionDraftOperation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformEditExtensionDraftOperation", reflect.TypeOf((*MockGalleryClient)(nil).PerformEditExtensionDraftOperation), arg0, arg1)
}

// PerformNewExtensionDraftOperation mocks base method.
func (m *MockGalleryClient) PerformNewExtensionDraftOperation(arg0 context.Context, arg1 gallery.PerformNewExtensionDraftOperationArgs) (*gallery.ExtensionDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformNewExtensionDraftOperation", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformNewExtensionDraftOperation indicates an expected call of PerformNewExtensionDraftOperation.
func (mr *MockGalleryClientMockRecorder) PerformNewExtensionDraftOperation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformNewExtensionDraftOperation", reflect.TypeOf((*MockGalleryClient)(nil).PerformNewExtensionDraftOperation), arg0, arg1)
}

// PublishExtensionEvents mocks base method.
func (m *MockGalleryClient) PublishExtensionEvents(arg0 context.Context, arg1 gallery.PublishExtensionEventsArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExtensionEvents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExtensionEvents indicates an expected call of PublishExtensionEvents.
func (mr *MockGalleryClientMockRecorder) PublishExtensionEvents(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExtensionEvents", reflect.TypeOf((*MockGalleryClient)(nil).PublishExtensionEvents), arg0, arg1)
}

// QueryAssociatedAzurePublisher mocks base method.
func (m *MockGalleryClient) QueryAssociatedAzurePublisher(arg0 context.Context, arg1 gallery.QueryAssociatedAzurePublisherArgs) (*gallery.AzurePublisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAssociatedAzurePublisher", arg0, arg1)
	ret0, _ := ret[0].(*gallery.AzurePublisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAssociatedAzurePublisher indicates an expected call of QueryAssociatedAzurePublisher.
func (mr *MockGalleryClientMockRecorder) QueryAssociatedAzurePublisher(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAssociatedAzurePublisher", reflect.TypeOf((*MockGalleryClient)(nil).QueryAssociatedAzurePublisher), arg0, arg1)
}

// QueryExtensions mocks base method.
func (m *MockGalleryClient) QueryExtensions(arg0 context.Context, arg1 gallery.QueryExtensionsArgs) (*gallery.ExtensionQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryExtensions", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryExtensions indicates an expected call of QueryExtensions.
func (mr *MockGalleryClientMockRecorder) QueryExtensions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryExtensions", reflect.TypeOf((*MockGalleryClient)(nil).QueryExtensions), arg0, arg1)
}

// QueryPublishers mocks base method.
func (m *MockGalleryClient) QueryPublishers(arg0 context.Context, arg1 gallery.QueryPublishersArgs) (*gallery.PublisherQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPublishers", arg0, arg1)
	ret0, _ := ret[0].(*gallery.PublisherQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPublishers indicates an expected call of QueryPublishers.
func (mr *MockGalleryClientMockRecorder) QueryPublishers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPublishers", reflect.TypeOf((*MockGalleryClient)(nil).QueryPublishers), arg0, arg1)
}

// ReportQuestion mocks base method.
func (m *MockGalleryClient) ReportQuestion(arg0 context.Context, arg1 gallery.ReportQuestionArgs) (*gallery.Concern, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportQuestion", arg0, arg1)
	ret0, _ := ret[0].(*gallery.Concern)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportQuestion indicates an expected call of ReportQuestion.
func (mr *MockGalleryClientMockRecorder) ReportQuestion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportQuestion", reflect.TypeOf((*MockGalleryClient)(nil).ReportQuestion), arg0, arg1)
}

// RequestAcquisition mocks base method.
func (m *MockGalleryClient) RequestAcquisition(arg0 context.Context, arg1 gallery.RequestAcquisitionArgs) (*gallery.ExtensionAcquisitionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestAcquisition", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionAcquisitionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestAcquisition indicates an expected call of RequestAcquisition.
func (mr *MockGalleryClientMockRecorder) RequestAcquisition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAcquisition", reflect.TypeOf((*MockGalleryClient)(nil).RequestAcquisition), arg0, arg1)
}

// SendNotifications mocks base method.
func (m *MockGalleryClient) SendNotifications(arg0 context.Context, arg1 gallery.SendNotificationsArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotifications", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotifications indicates an expected call of SendNotifications.
func (mr *MockGalleryClientMockRecorder) SendNotifications(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotifications", reflect.TypeOf((*MockGalleryClient)(nil).SendNotifications), arg0, arg1)
}

// SetGalleryUserSettings mocks base method.
func (m *MockGalleryClient) SetGalleryUserSettings(arg0 context.Context, arg1 gallery.SetGalleryUserSettingsArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGalleryUserSettings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGalleryUserSettings indicates an expected call of SetGalleryUserSettings.
func (mr *MockGalleryClientMockRecorder) SetGalleryUserSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGalleryUserSettings", reflect.TypeOf((*MockGalleryClient)(nil).SetGalleryUserSettings), arg0, arg1)
}

// ShareExtension mocks base method.
func (m *MockGalleryClient) ShareExtension(arg0 context.Context, arg1 gallery.ShareExtensionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareExtension", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShareExtension indicates an expected call of ShareExtension.
func (mr *MockGalleryClientMockRecorder) ShareExtension(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareExtension", reflect.TypeOf((*MockGalleryClient)(nil).ShareExtension), arg0, arg1)
}

// ShareExtensionById mocks base method.
func (m *MockGalleryClient) ShareExtensionById(arg0 context.Context, arg1 gallery.ShareExtensionByIdArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareExtensionById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShareExtensionById indicates an expected call of ShareExtensionById.
func (mr *MockGalleryClientMockRecorder) ShareExtensionById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareExtensionById", reflect.TypeOf((*MockGalleryClient)(nil).ShareExtensionById), arg0, arg1)
}

// ShareExtensionWithHost mocks base method.
func (m *MockGalleryClient) ShareExtensionWithHost(arg0 context.Context, arg1 gallery.ShareExtensionWithHostArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareExtensionWithHost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShareExtensionWithHost indicates an expected call of ShareExtensionWithHost.
func (mr *MockGalleryClientMockRecorder) ShareExtensionWithHost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareExtensionWithHost", reflect.TypeOf((*MockGalleryClient)(nil).ShareExtensionWithHost), arg0, arg1)
}

// UnshareExtension mocks base method.
func (m *MockGalleryClient) UnshareExtension(arg0 context.Context, arg1 gallery.UnshareExtensionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnshareExtension", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnshareExtension indicates an expected call of UnshareExtension.
func (mr *MockGalleryClientMockRecorder) UnshareExtension(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareExtension", reflect.TypeOf((*MockGalleryClient)(nil).UnshareExtension), arg0, arg1)
}

// UnshareExtensionById mocks base method.
func (m *MockGalleryClient) UnshareExtensionById(arg0 context.Context, arg1 gallery.UnshareExtensionByIdArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnshareExtensionById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnshareExtensionById indicates an expected call of UnshareExtensionById.
func (mr *MockGalleryClientMockRecorder) UnshareExtensionById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareExtensionById", reflect.TypeOf((*MockGalleryClient)(nil).UnshareExtensionById), arg0, arg1)
}

// UnshareExtensionWithHost mocks base method.
func (m *MockGalleryClient) UnshareExtensionWithHost(arg0 context.Context, arg1 gallery.UnshareExtensionWithHostArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnshareExtensionWithHost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnshareExtensionWithHost indicates an expected call of UnshareExtensionWithHost.
func (mr *MockGalleryClientMockRecorder) UnshareExtensionWithHost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnshareExtensionWithHost", reflect.TypeOf((*MockGalleryClient)(nil).UnshareExtensionWithHost), arg0, arg1)
}

// UpdateExtension mocks base method.
func (m *MockGalleryClient) UpdateExtension(arg0 context.Context, arg1 gallery.UpdateExtensionArgs) (*gallery.PublishedExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExtension", arg0, arg1)
	ret0, _ := ret[0].(*gallery.PublishedExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExtension indicates an expected call of UpdateExtension.
func (mr *MockGalleryClientMockRecorder) UpdateExtension(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtension", reflect.TypeOf((*MockGalleryClient)(nil).UpdateExtension), arg0, arg1)
}

// UpdateExtensionById mocks base method.
func (m *MockGalleryClient) UpdateExtensionById(arg0 context.Context, arg1 gallery.UpdateExtensionByIdArgs) (*gallery.PublishedExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExtensionById", arg0, arg1)
	ret0, _ := ret[0].(*gallery.PublishedExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExtensionById indicates an expected call of UpdateExtensionById.
func (mr *MockGalleryClientMockRecorder) UpdateExtensionById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtensionById", reflect.TypeOf((*MockGalleryClient)(nil).UpdateExtensionById), arg0, arg1)
}

// UpdateExtensionProperties mocks base method.
func (m *MockGalleryClient) UpdateExtensionProperties(arg0 context.Context, arg1 gallery.UpdateExtensionPropertiesArgs) (*gallery.PublishedExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExtensionProperties", arg0, arg1)
	ret0, _ := ret[0].(*gallery.PublishedExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExtensionProperties indicates an expected call of UpdateExtensionProperties.
func (mr *MockGalleryClientMockRecorder) UpdateExtensionProperties(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtensionProperties", reflect.TypeOf((*MockGalleryClient)(nil).UpdateExtensionProperties), arg0, arg1)
}

// UpdateExtensionStatistics mocks base method.
func (m *MockGalleryClient) UpdateExtensionStatistics(arg0 context.Context, arg1 gallery.UpdateExtensionStatisticsArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExtensionStatistics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExtensionStatistics indicates an expected call of UpdateExtensionStatistics.
func (mr *MockGalleryClientMockRecorder) UpdateExtensionStatistics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtensionStatistics", reflect.TypeOf((*MockGalleryClient)(nil).UpdateExtensionStatistics), arg0, arg1)
}

// UpdatePayloadInDraftForEditExtension mocks base method.
func (m *MockGalleryClient) UpdatePayloadInDraftForEditExtension(arg0 context.Context, arg1 gallery.UpdatePayloadInDraftForEditExtensionArgs) (*gallery.ExtensionDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayloadInDraftForEditExtension", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayloadInDraftForEditExtension indicates an expected call of UpdatePayloadInDraftForEditExtension.
func (mr *MockGalleryClientMockRecorder) UpdatePayloadInDraftForEditExtension(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayloadInDraftForEditExtension", reflect.TypeOf((*MockGalleryClient)(nil).UpdatePayloadInDraftForEditExtension), arg0, arg1)
}

// UpdatePayloadInDraftForNewExtension mocks base method.
func (m *MockGalleryClient) UpdatePayloadInDraftForNewExtension(arg0 context.Context, arg1 gallery.UpdatePayloadInDraftForNewExtensionArgs) (*gallery.ExtensionDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayloadInDraftForNewExtension", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ExtensionDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayloadInDraftForNewExtension indicates an expected call of UpdatePayloadInDraftForNewExtension.
func (mr *MockGalleryClientMockRecorder) UpdatePayloadInDraftForNewExtension(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayloadInDraftForNewExtension", reflect.TypeOf((*MockGalleryClient)(nil).UpdatePayloadInDraftForNewExtension), arg0, arg1)
}

// UpdatePublisher mocks base method.
func (m *MockGalleryClient) UpdatePublisher(arg0 context.Context, arg1 gallery.UpdatePublisherArgs) (*gallery.Publisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublisher", arg0, arg1)
	ret0, _ := ret[0].(*gallery.Publisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePublisher indicates an expected call of UpdatePublisher.
func (mr *MockGalleryClientMockRecorder) UpdatePublisher(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublisher", reflect.TypeOf((*MockGalleryClient)(nil).UpdatePublisher), arg0, arg1)
}

// UpdatePublisherAsset mocks base method.
func (m *MockGalleryClient) UpdatePublisherAsset(arg0 context.Context, arg1 gallery.UpdatePublisherAssetArgs) (*map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublisherAsset", arg0, arg1)
	ret0, _ := ret[0].(*map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePublisherAsset indicates an expected call of UpdatePublisherAsset.
func (mr *MockGalleryClientMockRecorder) UpdatePublisherAsset(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublisherAsset", reflect.TypeOf((*MockGalleryClient)(nil).UpdatePublisherAsset), arg0, arg1)
}

// UpdatePublisherMembers mocks base method.
func (m *MockGalleryClient) UpdatePublisherMembers(arg0 context.Context, arg1 gallery.UpdatePublisherMembersArgs) (*[]gallery.PublisherRoleAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublisherMembers", arg0, arg1)
	ret0, _ := ret[0].(*[]gallery.PublisherRoleAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePublisherMembers indicates an expected call of UpdatePublisherMembers.
func (mr *MockGalleryClientMockRecorder) UpdatePublisherMembers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublisherMembers", reflect.TypeOf((*MockGalleryClient)(nil).UpdatePublisherMembers), arg0, arg1)
}

// UpdateQuestion mocks base method.
func (m *MockGalleryClient) UpdateQuestion(arg0 context.Context, arg1 gallery.UpdateQuestionArgs) (*gallery.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", arg0, arg1)
	ret0, _ := ret[0].(*gallery.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockGalleryClientMockRecorder) UpdateQuestion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockGalleryClient)(nil).UpdateQuestion), arg0, arg1)
}

// UpdateResponse mocks base method.
func (m *MockGalleryClient) UpdateResponse(arg0 context.Context, arg1 gallery.UpdateResponseArgs) (*gallery.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResponse", arg0, arg1)
	ret0, _ := ret[0].(*gallery.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResponse indicates an expected call of UpdateResponse.
func (mr *MockGalleryClientMockRecorder) UpdateResponse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResponse", reflect.TypeOf((*MockGalleryClient)(nil).UpdateResponse), arg0, arg1)
}

// UpdateReview mocks base method.
func (m *MockGalleryClient) UpdateReview(arg0 context.Context, arg1 gallery.UpdateReviewArgs) (*gallery.ReviewPatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", arg0, arg1)
	ret0, _ := ret[0].(*gallery.ReviewPatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockGalleryClientMockRecorder) UpdateReview(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockGalleryClient)(nil).UpdateReview), arg0, arg1)
}

// UpdateVSCodeWebExtensionStatistics mocks base method.
func (m *MockGalleryClient) UpdateVSCodeWebExtensionStatistics(arg0 context.Context, arg1 gallery.UpdateVSCodeWebExtensionStatisticsArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVSCodeWebExtensionStatistics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVSCodeWebExtensionStatistics indicates an expected call of UpdateVSCodeWebExtensionStatistics.
func (mr *MockGalleryClientMockRecorder) UpdateVSCodeWebExtensionStatistics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVSCodeWebExtensionStatistics", reflect.TypeOf((*MockGalleryClient)(nil).UpdateVSCodeWebExtensionStatistics), arg0, arg1)
}

// VerifyDomainToken mocks base method.
func (m *MockGalleryClient) VerifyDomainToken(arg0 context.Context, arg1 gallery.VerifyDomainTokenArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyDomainToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyDomainToken indicates an expected call of VerifyDomainToken.
func (mr *MockGalleryClientMockRecorder) VerifyDomainToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyDomainToken", reflect.TypeOf((*MockGalleryClient)(nil).VerifyDomainToken), arg0, arg1)
}
