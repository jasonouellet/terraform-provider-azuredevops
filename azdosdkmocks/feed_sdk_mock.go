// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/azure-devops-go-api/azuredevops/v7/feed (interfaces: Client)

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	io "io"
	reflect "reflect"

	feed "github.com/microsoft/azure-devops-go-api/azuredevops/v7/feed"
	operations "github.com/microsoft/azure-devops-go-api/azuredevops/v7/operations"
	gomock "go.uber.org/mock/gomock"
)

// MockFeedClient is a mock of Client interface.
type MockFeedClient struct {
	ctrl     *gomock.Controller
	recorder *MockFeedClientMockRecorder
	isgomock struct{}
}

// MockFeedClientMockRecorder is the mock recorder for MockFeedClient.
type MockFeedClientMockRecorder struct {
	mock *MockFeedClient
}

// NewMockFeedClient creates a new mock instance.
func NewMockFeedClient(ctrl *gomock.Controller) *MockFeedClient {
	mock := &MockFeedClient{ctrl: ctrl}
	mock.recorder = &MockFeedClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedClient) EXPECT() *MockFeedClientMockRecorder {
	return m.recorder
}

// CreateFeed mocks base method.
func (m *MockFeedClient) CreateFeed(arg0 context.Context, arg1 feed.CreateFeedArgs) (*feed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeed", arg0, arg1)
	ret0, _ := ret[0].(*feed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeed indicates an expected call of CreateFeed.
func (mr *MockFeedClientMockRecorder) CreateFeed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeed", reflect.TypeOf((*MockFeedClient)(nil).CreateFeed), arg0, arg1)
}

// CreateFeedView mocks base method.
func (m *MockFeedClient) CreateFeedView(arg0 context.Context, arg1 feed.CreateFeedViewArgs) (*feed.FeedView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeedView", arg0, arg1)
	ret0, _ := ret[0].(*feed.FeedView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeedView indicates an expected call of CreateFeedView.
func (mr *MockFeedClientMockRecorder) CreateFeedView(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeedView", reflect.TypeOf((*MockFeedClient)(nil).CreateFeedView), arg0, arg1)
}

// DeleteFeed mocks base method.
func (m *MockFeedClient) DeleteFeed(arg0 context.Context, arg1 feed.DeleteFeedArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeed indicates an expected call of DeleteFeed.
func (mr *MockFeedClientMockRecorder) DeleteFeed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeed", reflect.TypeOf((*MockFeedClient)(nil).DeleteFeed), arg0, arg1)
}

// DeleteFeedRetentionPolicies mocks base method.
func (m *MockFeedClient) DeleteFeedRetentionPolicies(arg0 context.Context, arg1 feed.DeleteFeedRetentionPoliciesArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeedRetentionPolicies", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeedRetentionPolicies indicates an expected call of DeleteFeedRetentionPolicies.
func (mr *MockFeedClientMockRecorder) DeleteFeedRetentionPolicies(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeedRetentionPolicies", reflect.TypeOf((*MockFeedClient)(nil).DeleteFeedRetentionPolicies), arg0, arg1)
}

// DeleteFeedView mocks base method.
func (m *MockFeedClient) DeleteFeedView(arg0 context.Context, arg1 feed.DeleteFeedViewArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeedView", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeedView indicates an expected call of DeleteFeedView.
func (mr *MockFeedClientMockRecorder) DeleteFeedView(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeedView", reflect.TypeOf((*MockFeedClient)(nil).DeleteFeedView), arg0, arg1)
}

// EmptyRecycleBin mocks base method.
func (m *MockFeedClient) EmptyRecycleBin(arg0 context.Context, arg1 feed.EmptyRecycleBinArgs) (*operations.OperationReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmptyRecycleBin", arg0, arg1)
	ret0, _ := ret[0].(*operations.OperationReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmptyRecycleBin indicates an expected call of EmptyRecycleBin.
func (mr *MockFeedClientMockRecorder) EmptyRecycleBin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptyRecycleBin", reflect.TypeOf((*MockFeedClient)(nil).EmptyRecycleBin), arg0, arg1)
}

// GetBadge mocks base method.
func (m *MockFeedClient) GetBadge(arg0 context.Context, arg1 feed.GetBadgeArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBadge", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBadge indicates an expected call of GetBadge.
func (mr *MockFeedClientMockRecorder) GetBadge(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBadge", reflect.TypeOf((*MockFeedClient)(nil).GetBadge), arg0, arg1)
}

// GetFeed mocks base method.
func (m *MockFeedClient) GetFeed(arg0 context.Context, arg1 feed.GetFeedArgs) (*feed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", arg0, arg1)
	ret0, _ := ret[0].(*feed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockFeedClientMockRecorder) GetFeed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockFeedClient)(nil).GetFeed), arg0, arg1)
}

// GetFeedChange mocks base method.
func (m *MockFeedClient) GetFeedChange(arg0 context.Context, arg1 feed.GetFeedChangeArgs) (*feed.FeedChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedChange", arg0, arg1)
	ret0, _ := ret[0].(*feed.FeedChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedChange indicates an expected call of GetFeedChange.
func (mr *MockFeedClientMockRecorder) GetFeedChange(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedChange", reflect.TypeOf((*MockFeedClient)(nil).GetFeedChange), arg0, arg1)
}

// GetFeedChanges mocks base method.
func (m *MockFeedClient) GetFeedChanges(arg0 context.Context, arg1 feed.GetFeedChangesArgs) (*feed.FeedChangesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedChanges", arg0, arg1)
	ret0, _ := ret[0].(*feed.FeedChangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedChanges indicates an expected call of GetFeedChanges.
func (mr *MockFeedClientMockRecorder) GetFeedChanges(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedChanges", reflect.TypeOf((*MockFeedClient)(nil).GetFeedChanges), arg0, arg1)
}

// GetFeedPermissions mocks base method.
func (m *MockFeedClient) GetFeedPermissions(arg0 context.Context, arg1 feed.GetFeedPermissionsArgs) (*[]feed.FeedPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedPermissions", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.FeedPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedPermissions indicates an expected call of GetFeedPermissions.
func (mr *MockFeedClientMockRecorder) GetFeedPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedPermissions", reflect.TypeOf((*MockFeedClient)(nil).GetFeedPermissions), arg0, arg1)
}

// GetFeedRetentionPolicies mocks base method.
func (m *MockFeedClient) GetFeedRetentionPolicies(arg0 context.Context, arg1 feed.GetFeedRetentionPoliciesArgs) (*feed.FeedRetentionPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedRetentionPolicies", arg0, arg1)
	ret0, _ := ret[0].(*feed.FeedRetentionPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedRetentionPolicies indicates an expected call of GetFeedRetentionPolicies.
func (mr *MockFeedClientMockRecorder) GetFeedRetentionPolicies(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedRetentionPolicies", reflect.TypeOf((*MockFeedClient)(nil).GetFeedRetentionPolicies), arg0, arg1)
}

// GetFeedView mocks base method.
func (m *MockFeedClient) GetFeedView(arg0 context.Context, arg1 feed.GetFeedViewArgs) (*feed.FeedView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedView", arg0, arg1)
	ret0, _ := ret[0].(*feed.FeedView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedView indicates an expected call of GetFeedView.
func (mr *MockFeedClientMockRecorder) GetFeedView(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedView", reflect.TypeOf((*MockFeedClient)(nil).GetFeedView), arg0, arg1)
}

// GetFeedViews mocks base method.
func (m *MockFeedClient) GetFeedViews(arg0 context.Context, arg1 feed.GetFeedViewsArgs) (*[]feed.FeedView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedViews", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.FeedView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedViews indicates an expected call of GetFeedViews.
func (mr *MockFeedClientMockRecorder) GetFeedViews(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedViews", reflect.TypeOf((*MockFeedClient)(nil).GetFeedViews), arg0, arg1)
}

// GetFeeds mocks base method.
func (m *MockFeedClient) GetFeeds(arg0 context.Context, arg1 feed.GetFeedsArgs) (*[]feed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeeds", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeeds indicates an expected call of GetFeeds.
func (mr *MockFeedClientMockRecorder) GetFeeds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeeds", reflect.TypeOf((*MockFeedClient)(nil).GetFeeds), arg0, arg1)
}

// GetFeedsFromRecycleBin mocks base method.
func (m *MockFeedClient) GetFeedsFromRecycleBin(arg0 context.Context, arg1 feed.GetFeedsFromRecycleBinArgs) (*[]feed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedsFromRecycleBin", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedsFromRecycleBin indicates an expected call of GetFeedsFromRecycleBin.
func (mr *MockFeedClientMockRecorder) GetFeedsFromRecycleBin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedsFromRecycleBin", reflect.TypeOf((*MockFeedClient)(nil).GetFeedsFromRecycleBin), arg0, arg1)
}

// GetGlobalPermissions mocks base method.
func (m *MockFeedClient) GetGlobalPermissions(arg0 context.Context, arg1 feed.GetGlobalPermissionsArgs) (*[]feed.GlobalPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalPermissions", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.GlobalPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalPermissions indicates an expected call of GetGlobalPermissions.
func (mr *MockFeedClientMockRecorder) GetGlobalPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalPermissions", reflect.TypeOf((*MockFeedClient)(nil).GetGlobalPermissions), arg0, arg1)
}

// GetPackage mocks base method.
func (m *MockFeedClient) GetPackage(arg0 context.Context, arg1 feed.GetPackageArgs) (*feed.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackage", arg0, arg1)
	ret0, _ := ret[0].(*feed.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackage indicates an expected call of GetPackage.
func (mr *MockFeedClientMockRecorder) GetPackage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackage", reflect.TypeOf((*MockFeedClient)(nil).GetPackage), arg0, arg1)
}

// GetPackageChanges mocks base method.
func (m *MockFeedClient) GetPackageChanges(arg0 context.Context, arg1 feed.GetPackageChangesArgs) (*feed.PackageChangesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageChanges", arg0, arg1)
	ret0, _ := ret[0].(*feed.PackageChangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageChanges indicates an expected call of GetPackageChanges.
func (mr *MockFeedClientMockRecorder) GetPackageChanges(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageChanges", reflect.TypeOf((*MockFeedClient)(nil).GetPackageChanges), arg0, arg1)
}

// GetPackageVersion mocks base method.
func (m *MockFeedClient) GetPackageVersion(arg0 context.Context, arg1 feed.GetPackageVersionArgs) (*feed.PackageVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageVersion", arg0, arg1)
	ret0, _ := ret[0].(*feed.PackageVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageVersion indicates an expected call of GetPackageVersion.
func (mr *MockFeedClientMockRecorder) GetPackageVersion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersion", reflect.TypeOf((*MockFeedClient)(nil).GetPackageVersion), arg0, arg1)
}

// GetPackageVersionProvenance mocks base method.
func (m *MockFeedClient) GetPackageVersionProvenance(arg0 context.Context, arg1 feed.GetPackageVersionProvenanceArgs) (*feed.PackageVersionProvenance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageVersionProvenance", arg0, arg1)
	ret0, _ := ret[0].(*feed.PackageVersionProvenance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageVersionProvenance indicates an expected call of GetPackageVersionProvenance.
func (mr *MockFeedClientMockRecorder) GetPackageVersionProvenance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersionProvenance", reflect.TypeOf((*MockFeedClient)(nil).GetPackageVersionProvenance), arg0, arg1)
}

// GetPackageVersions mocks base method.
func (m *MockFeedClient) GetPackageVersions(arg0 context.Context, arg1 feed.GetPackageVersionsArgs) (*[]feed.PackageVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageVersions", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.PackageVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageVersions indicates an expected call of GetPackageVersions.
func (mr *MockFeedClientMockRecorder) GetPackageVersions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageVersions", reflect.TypeOf((*MockFeedClient)(nil).GetPackageVersions), arg0, arg1)
}

// GetPackages mocks base method.
func (m *MockFeedClient) GetPackages(arg0 context.Context, arg1 feed.GetPackagesArgs) (*[]feed.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackages", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackages indicates an expected call of GetPackages.
func (mr *MockFeedClientMockRecorder) GetPackages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackages", reflect.TypeOf((*MockFeedClient)(nil).GetPackages), arg0, arg1)
}

// GetRecycleBinPackage mocks base method.
func (m *MockFeedClient) GetRecycleBinPackage(arg0 context.Context, arg1 feed.GetRecycleBinPackageArgs) (*feed.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecycleBinPackage", arg0, arg1)
	ret0, _ := ret[0].(*feed.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecycleBinPackage indicates an expected call of GetRecycleBinPackage.
func (mr *MockFeedClientMockRecorder) GetRecycleBinPackage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecycleBinPackage", reflect.TypeOf((*MockFeedClient)(nil).GetRecycleBinPackage), arg0, arg1)
}

// GetRecycleBinPackageVersion mocks base method.
func (m *MockFeedClient) GetRecycleBinPackageVersion(arg0 context.Context, arg1 feed.GetRecycleBinPackageVersionArgs) (*feed.RecycleBinPackageVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecycleBinPackageVersion", arg0, arg1)
	ret0, _ := ret[0].(*feed.RecycleBinPackageVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecycleBinPackageVersion indicates an expected call of GetRecycleBinPackageVersion.
func (mr *MockFeedClientMockRecorder) GetRecycleBinPackageVersion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecycleBinPackageVersion", reflect.TypeOf((*MockFeedClient)(nil).GetRecycleBinPackageVersion), arg0, arg1)
}

// GetRecycleBinPackageVersions mocks base method.
func (m *MockFeedClient) GetRecycleBinPackageVersions(arg0 context.Context, arg1 feed.GetRecycleBinPackageVersionsArgs) (*[]feed.RecycleBinPackageVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecycleBinPackageVersions", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.RecycleBinPackageVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecycleBinPackageVersions indicates an expected call of GetRecycleBinPackageVersions.
func (mr *MockFeedClientMockRecorder) GetRecycleBinPackageVersions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecycleBinPackageVersions", reflect.TypeOf((*MockFeedClient)(nil).GetRecycleBinPackageVersions), arg0, arg1)
}

// GetRecycleBinPackages mocks base method.
func (m *MockFeedClient) GetRecycleBinPackages(arg0 context.Context, arg1 feed.GetRecycleBinPackagesArgs) (*[]feed.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecycleBinPackages", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecycleBinPackages indicates an expected call of GetRecycleBinPackages.
func (mr *MockFeedClientMockRecorder) GetRecycleBinPackages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecycleBinPackages", reflect.TypeOf((*MockFeedClient)(nil).GetRecycleBinPackages), arg0, arg1)
}

// PermanentDeleteFeed mocks base method.
func (m *MockFeedClient) PermanentDeleteFeed(arg0 context.Context, arg1 feed.PermanentDeleteFeedArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermanentDeleteFeed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PermanentDeleteFeed indicates an expected call of PermanentDeleteFeed.
func (mr *MockFeedClientMockRecorder) PermanentDeleteFeed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermanentDeleteFeed", reflect.TypeOf((*MockFeedClient)(nil).PermanentDeleteFeed), arg0, arg1)
}

// QueryPackageMetrics mocks base method.
func (m *MockFeedClient) QueryPackageMetrics(arg0 context.Context, arg1 feed.QueryPackageMetricsArgs) (*[]feed.PackageMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPackageMetrics", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.PackageMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPackageMetrics indicates an expected call of QueryPackageMetrics.
func (mr *MockFeedClientMockRecorder) QueryPackageMetrics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPackageMetrics", reflect.TypeOf((*MockFeedClient)(nil).QueryPackageMetrics), arg0, arg1)
}

// QueryPackageVersionMetrics mocks base method.
func (m *MockFeedClient) QueryPackageVersionMetrics(arg0 context.Context, arg1 feed.QueryPackageVersionMetricsArgs) (*[]feed.PackageVersionMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPackageVersionMetrics", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.PackageVersionMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPackageVersionMetrics indicates an expected call of QueryPackageVersionMetrics.
func (mr *MockFeedClientMockRecorder) QueryPackageVersionMetrics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPackageVersionMetrics", reflect.TypeOf((*MockFeedClient)(nil).QueryPackageVersionMetrics), arg0, arg1)
}

// RestoreDeletedFeed mocks base method.
func (m *MockFeedClient) RestoreDeletedFeed(arg0 context.Context, arg1 feed.RestoreDeletedFeedArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreDeletedFeed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreDeletedFeed indicates an expected call of RestoreDeletedFeed.
func (mr *MockFeedClientMockRecorder) RestoreDeletedFeed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreDeletedFeed", reflect.TypeOf((*MockFeedClient)(nil).RestoreDeletedFeed), arg0, arg1)
}

// SetFeedPermissions mocks base method.
func (m *MockFeedClient) SetFeedPermissions(arg0 context.Context, arg1 feed.SetFeedPermissionsArgs) (*[]feed.FeedPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFeedPermissions", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.FeedPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFeedPermissions indicates an expected call of SetFeedPermissions.
func (mr *MockFeedClientMockRecorder) SetFeedPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFeedPermissions", reflect.TypeOf((*MockFeedClient)(nil).SetFeedPermissions), arg0, arg1)
}

// SetFeedRetentionPolicies mocks base method.
func (m *MockFeedClient) SetFeedRetentionPolicies(arg0 context.Context, arg1 feed.SetFeedRetentionPoliciesArgs) (*feed.FeedRetentionPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFeedRetentionPolicies", arg0, arg1)
	ret0, _ := ret[0].(*feed.FeedRetentionPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetFeedRetentionPolicies indicates an expected call of SetFeedRetentionPolicies.
func (mr *MockFeedClientMockRecorder) SetFeedRetentionPolicies(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFeedRetentionPolicies", reflect.TypeOf((*MockFeedClient)(nil).SetFeedRetentionPolicies), arg0, arg1)
}

// SetGlobalPermissions mocks base method.
func (m *MockFeedClient) SetGlobalPermissions(arg0 context.Context, arg1 feed.SetGlobalPermissionsArgs) (*[]feed.GlobalPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGlobalPermissions", arg0, arg1)
	ret0, _ := ret[0].(*[]feed.GlobalPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGlobalPermissions indicates an expected call of SetGlobalPermissions.
func (mr *MockFeedClientMockRecorder) SetGlobalPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobalPermissions", reflect.TypeOf((*MockFeedClient)(nil).SetGlobalPermissions), arg0, arg1)
}

// UpdateFeed mocks base method.
func (m *MockFeedClient) UpdateFeed(arg0 context.Context, arg1 feed.UpdateFeedArgs) (*feed.Feed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeed", arg0, arg1)
	ret0, _ := ret[0].(*feed.Feed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeed indicates an expected call of UpdateFeed.
func (mr *MockFeedClientMockRecorder) UpdateFeed(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeed", reflect.TypeOf((*MockFeedClient)(nil).UpdateFeed), arg0, arg1)
}

// UpdateFeedView mocks base method.
func (m *MockFeedClient) UpdateFeedView(arg0 context.Context, arg1 feed.UpdateFeedViewArgs) (*feed.FeedView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeedView", arg0, arg1)
	ret0, _ := ret[0].(*feed.FeedView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeedView indicates an expected call of UpdateFeedView.
func (mr *MockFeedClientMockRecorder) UpdateFeedView(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeedView", reflect.TypeOf((*MockFeedClient)(nil).UpdateFeedView), arg0, arg1)
}
