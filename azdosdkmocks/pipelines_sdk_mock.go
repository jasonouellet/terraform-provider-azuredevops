// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/azure-devops-go-api/azuredevops/v7/pipelines (interfaces: Client)

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	reflect "reflect"

	pipelines "github.com/microsoft/azure-devops-go-api/azuredevops/v7/pipelines"
	gomock "go.uber.org/mock/gomock"
)

// MockPipelinesClient is a mock of Client interface.
type MockPipelinesClient struct {
	ctrl     *gomock.Controller
	recorder *MockPipelinesClientMockRecorder
	isgomock struct{}
}

// MockPipelinesClientMockRecorder is the mock recorder for MockPipelinesClient.
type MockPipelinesClientMockRecorder struct {
	mock *MockPipelinesClient
}

// NewMockPipelinesClient creates a new mock instance.
func NewMockPipelinesClient(ctrl *gomock.Controller) *MockPipelinesClient {
	mock := &MockPipelinesClient{ctrl: ctrl}
	mock.recorder = &MockPipelinesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelinesClient) EXPECT() *MockPipelinesClientMockRecorder {
	return m.recorder
}

// CreatePipeline mocks base method.
func (m *MockPipelinesClient) CreatePipeline(arg0 context.Context, arg1 pipelines.CreatePipelineArgs) (*pipelines.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", arg0, arg1)
	ret0, _ := ret[0].(*pipelines.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockPipelinesClientMockRecorder) CreatePipeline(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockPipelinesClient)(nil).CreatePipeline), arg0, arg1)
}

// GetArtifact mocks base method.
func (m *MockPipelinesClient) GetArtifact(arg0 context.Context, arg1 pipelines.GetArtifactArgs) (*pipelines.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifact", arg0, arg1)
	ret0, _ := ret[0].(*pipelines.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifact indicates an expected call of GetArtifact.
func (mr *MockPipelinesClientMockRecorder) GetArtifact(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifact", reflect.TypeOf((*MockPipelinesClient)(nil).GetArtifact), arg0, arg1)
}

// GetLog mocks base method.
func (m *MockPipelinesClient) GetLog(arg0 context.Context, arg1 pipelines.GetLogArgs) (*pipelines.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLog", arg0, arg1)
	ret0, _ := ret[0].(*pipelines.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLog indicates an expected call of GetLog.
func (mr *MockPipelinesClientMockRecorder) GetLog(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockPipelinesClient)(nil).GetLog), arg0, arg1)
}

// GetPipeline mocks base method.
func (m *MockPipelinesClient) GetPipeline(arg0 context.Context, arg1 pipelines.GetPipelineArgs) (*pipelines.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", arg0, arg1)
	ret0, _ := ret[0].(*pipelines.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockPipelinesClientMockRecorder) GetPipeline(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockPipelinesClient)(nil).GetPipeline), arg0, arg1)
}

// GetRun mocks base method.
func (m *MockPipelinesClient) GetRun(arg0 context.Context, arg1 pipelines.GetRunArgs) (*pipelines.Run, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRun", arg0, arg1)
	ret0, _ := ret[0].(*pipelines.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRun indicates an expected call of GetRun.
func (mr *MockPipelinesClientMockRecorder) GetRun(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRun", reflect.TypeOf((*MockPipelinesClient)(nil).GetRun), arg0, arg1)
}

// ListLogs mocks base method.
func (m *MockPipelinesClient) ListLogs(arg0 context.Context, arg1 pipelines.ListLogsArgs) (*pipelines.LogCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogs", arg0, arg1)
	ret0, _ := ret[0].(*pipelines.LogCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogs indicates an expected call of ListLogs.
func (mr *MockPipelinesClientMockRecorder) ListLogs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogs", reflect.TypeOf((*MockPipelinesClient)(nil).ListLogs), arg0, arg1)
}

// ListPipelines mocks base method.
func (m *MockPipelinesClient) ListPipelines(arg0 context.Context, arg1 pipelines.ListPipelinesArgs) (*[]pipelines.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelines", arg0, arg1)
	ret0, _ := ret[0].(*[]pipelines.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockPipelinesClientMockRecorder) ListPipelines(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockPipelinesClient)(nil).ListPipelines), arg0, arg1)
}

// ListRuns mocks base method.
func (m *MockPipelinesClient) ListRuns(arg0 context.Context, arg1 pipelines.ListRunsArgs) (*[]pipelines.Run, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRuns", arg0, arg1)
	ret0, _ := ret[0].(*[]pipelines.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuns indicates an expected call of ListRuns.
func (mr *MockPipelinesClientMockRecorder) ListRuns(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuns", reflect.TypeOf((*MockPipelinesClient)(nil).ListRuns), arg0, arg1)
}

// Preview mocks base method.
func (m *MockPipelinesClient) Preview(arg0 context.Context, arg1 pipelines.PreviewArgs) (*pipelines.PreviewRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preview", arg0, arg1)
	ret0, _ := ret[0].(*pipelines.PreviewRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Preview indicates an expected call of Preview.
func (mr *MockPipelinesClientMockRecorder) Preview(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preview", reflect.TypeOf((*MockPipelinesClient)(nil).Preview), arg0, arg1)
}

// RunPipeline mocks base method.
func (m *MockPipelinesClient) RunPipeline(arg0 context.Context, arg1 pipelines.RunPipelineArgs) (*pipelines.Run, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunPipeline", arg0, arg1)
	ret0, _ := ret[0].(*pipelines.Run)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunPipeline indicates an expected call of RunPipeline.
func (mr *MockPipelinesClientMockRecorder) RunPipeline(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunPipeline", reflect.TypeOf((*MockPipelinesClient)(nil).RunPipeline), arg0, arg1)
}
