// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/azure-devops-go-api/azuredevops/v7/elastic (interfaces: Client)

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	reflect "reflect"

	elastic "github.com/microsoft/azure-devops-go-api/azuredevops/v7/elastic"
	gomock "go.uber.org/mock/gomock"
)

// MockElasticClient is a mock of Client interface.
type MockElasticClient struct {
	ctrl     *gomock.Controller
	recorder *MockElasticClientMockRecorder
	isgomock struct{}
}

// MockElasticClientMockRecorder is the mock recorder for MockElasticClient.
type MockElasticClientMockRecorder struct {
	mock *MockElasticClient
}

// NewMockElasticClient creates a new mock instance.
func NewMockElasticClient(ctrl *gomock.Controller) *MockElasticClient {
	mock := &MockElasticClient{ctrl: ctrl}
	mock.recorder = &MockElasticClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElasticClient) EXPECT() *MockElasticClientMockRecorder {
	return m.recorder
}

// CreateElasticPool mocks base method.
func (m *MockElasticClient) CreateElasticPool(arg0 context.Context, arg1 elastic.CreateElasticPoolArgs) (*elastic.ElasticPoolCreationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateElasticPool", arg0, arg1)
	ret0, _ := ret[0].(*elastic.ElasticPoolCreationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateElasticPool indicates an expected call of CreateElasticPool.
func (mr *MockElasticClientMockRecorder) CreateElasticPool(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateElasticPool", reflect.TypeOf((*MockElasticClient)(nil).CreateElasticPool), arg0, arg1)
}

// GetElasticNodes mocks base method.
func (m *MockElasticClient) GetElasticNodes(arg0 context.Context, arg1 elastic.GetElasticNodesArgs) (*[]elastic.ElasticNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElasticNodes", arg0, arg1)
	ret0, _ := ret[0].(*[]elastic.ElasticNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElasticNodes indicates an expected call of GetElasticNodes.
func (mr *MockElasticClientMockRecorder) GetElasticNodes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElasticNodes", reflect.TypeOf((*MockElasticClient)(nil).GetElasticNodes), arg0, arg1)
}

// GetElasticPool mocks base method.
func (m *MockElasticClient) GetElasticPool(arg0 context.Context, arg1 elastic.GetElasticPoolArgs) (*elastic.ElasticPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElasticPool", arg0, arg1)
	ret0, _ := ret[0].(*elastic.ElasticPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElasticPool indicates an expected call of GetElasticPool.
func (mr *MockElasticClientMockRecorder) GetElasticPool(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElasticPool", reflect.TypeOf((*MockElasticClient)(nil).GetElasticPool), arg0, arg1)
}

// GetElasticPoolLogs mocks base method.
func (m *MockElasticClient) GetElasticPoolLogs(arg0 context.Context, arg1 elastic.GetElasticPoolLogsArgs) (*[]elastic.ElasticPoolLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElasticPoolLogs", arg0, arg1)
	ret0, _ := ret[0].(*[]elastic.ElasticPoolLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElasticPoolLogs indicates an expected call of GetElasticPoolLogs.
func (mr *MockElasticClientMockRecorder) GetElasticPoolLogs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElasticPoolLogs", reflect.TypeOf((*MockElasticClient)(nil).GetElasticPoolLogs), arg0, arg1)
}

// GetElasticPools mocks base method.
func (m *MockElasticClient) GetElasticPools(arg0 context.Context, arg1 elastic.GetElasticPoolsArgs) (*[]elastic.ElasticPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElasticPools", arg0, arg1)
	ret0, _ := ret[0].(*[]elastic.ElasticPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElasticPools indicates an expected call of GetElasticPools.
func (mr *MockElasticClientMockRecorder) GetElasticPools(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElasticPools", reflect.TypeOf((*MockElasticClient)(nil).GetElasticPools), arg0, arg1)
}

// UpdateElasticNode mocks base method.
func (m *MockElasticClient) UpdateElasticNode(arg0 context.Context, arg1 elastic.UpdateElasticNodeArgs) (*elastic.ElasticNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateElasticNode", arg0, arg1)
	ret0, _ := ret[0].(*elastic.ElasticNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateElasticNode indicates an expected call of UpdateElasticNode.
func (mr *MockElasticClientMockRecorder) UpdateElasticNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateElasticNode", reflect.TypeOf((*MockElasticClient)(nil).UpdateElasticNode), arg0, arg1)
}

// UpdateElasticPool mocks base method.
func (m *MockElasticClient) UpdateElasticPool(arg0 context.Context, arg1 elastic.UpdateElasticPoolArgs) (*elastic.ElasticPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateElasticPool", arg0, arg1)
	ret0, _ := ret[0].(*elastic.ElasticPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateElasticPool indicates an expected call of UpdateElasticPool.
func (mr *MockElasticClientMockRecorder) UpdateElasticPool(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateElasticPool", reflect.TypeOf((*MockElasticClient)(nil).UpdateElasticPool), arg0, arg1)
}
