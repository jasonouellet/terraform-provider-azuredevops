// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/azure-devops-go-api/azuredevops/v7/notification (interfaces: Client)

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	reflect "reflect"

	notification "github.com/microsoft/azure-devops-go-api/azuredevops/v7/notification"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationClient is a mock of Client interface.
type MockNotificationClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationClientMockRecorder
	isgomock struct{}
}

// MockNotificationClientMockRecorder is the mock recorder for MockNotificationClient.
type MockNotificationClientMockRecorder struct {
	mock *MockNotificationClient
}

// NewMockNotificationClient creates a new mock instance.
func NewMockNotificationClient(ctrl *gomock.Controller) *MockNotificationClient {
	mock := &MockNotificationClient{ctrl: ctrl}
	mock.recorder = &MockNotificationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationClient) EXPECT() *MockNotificationClientMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockNotificationClient) CreateSubscription(arg0 context.Context, arg1 notification.CreateSubscriptionArgs) (*notification.NotificationSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", arg0, arg1)
	ret0, _ := ret[0].(*notification.NotificationSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockNotificationClientMockRecorder) CreateSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockNotificationClient)(nil).CreateSubscription), arg0, arg1)
}

// DeleteSubscription mocks base method.
func (m *MockNotificationClient) DeleteSubscription(arg0 context.Context, arg1 notification.DeleteSubscriptionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockNotificationClientMockRecorder) DeleteSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockNotificationClient)(nil).DeleteSubscription), arg0, arg1)
}

// GetEventType mocks base method.
func (m *MockNotificationClient) GetEventType(arg0 context.Context, arg1 notification.GetEventTypeArgs) (*notification.NotificationEventType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventType", arg0, arg1)
	ret0, _ := ret[0].(*notification.NotificationEventType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventType indicates an expected call of GetEventType.
func (mr *MockNotificationClientMockRecorder) GetEventType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventType", reflect.TypeOf((*MockNotificationClient)(nil).GetEventType), arg0, arg1)
}

// GetSettings mocks base method.
func (m *MockNotificationClient) GetSettings(arg0 context.Context, arg1 notification.GetSettingsArgs) (*notification.NotificationAdminSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettings", arg0, arg1)
	ret0, _ := ret[0].(*notification.NotificationAdminSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockNotificationClientMockRecorder) GetSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockNotificationClient)(nil).GetSettings), arg0, arg1)
}

// GetSubscriber mocks base method.
func (m *MockNotificationClient) GetSubscriber(arg0 context.Context, arg1 notification.GetSubscriberArgs) (*notification.NotificationSubscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriber", arg0, arg1)
	ret0, _ := ret[0].(*notification.NotificationSubscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriber indicates an expected call of GetSubscriber.
func (mr *MockNotificationClientMockRecorder) GetSubscriber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriber", reflect.TypeOf((*MockNotificationClient)(nil).GetSubscriber), arg0, arg1)
}

// GetSubscription mocks base method.
func (m *MockNotificationClient) GetSubscription(arg0 context.Context, arg1 notification.GetSubscriptionArgs) (*notification.NotificationSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", arg0, arg1)
	ret0, _ := ret[0].(*notification.NotificationSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockNotificationClientMockRecorder) GetSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockNotificationClient)(nil).GetSubscription), arg0, arg1)
}

// GetSubscriptionDiagnostics mocks base method.
func (m *MockNotificationClient) GetSubscriptionDiagnostics(arg0 context.Context, arg1 notification.GetSubscriptionDiagnosticsArgs) (*notification.SubscriptionDiagnostics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionDiagnostics", arg0, arg1)
	ret0, _ := ret[0].(*notification.SubscriptionDiagnostics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionDiagnostics indicates an expected call of GetSubscriptionDiagnostics.
func (mr *MockNotificationClientMockRecorder) GetSubscriptionDiagnostics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionDiagnostics", reflect.TypeOf((*MockNotificationClient)(nil).GetSubscriptionDiagnostics), arg0, arg1)
}

// GetSubscriptionTemplates mocks base method.
func (m *MockNotificationClient) GetSubscriptionTemplates(arg0 context.Context, arg1 notification.GetSubscriptionTemplatesArgs) (*[]notification.NotificationSubscriptionTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionTemplates", arg0, arg1)
	ret0, _ := ret[0].(*[]notification.NotificationSubscriptionTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionTemplates indicates an expected call of GetSubscriptionTemplates.
func (mr *MockNotificationClientMockRecorder) GetSubscriptionTemplates(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionTemplates", reflect.TypeOf((*MockNotificationClient)(nil).GetSubscriptionTemplates), arg0, arg1)
}

// ListEventTypes mocks base method.
func (m *MockNotificationClient) ListEventTypes(arg0 context.Context, arg1 notification.ListEventTypesArgs) (*[]notification.NotificationEventType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventTypes", arg0, arg1)
	ret0, _ := ret[0].(*[]notification.NotificationEventType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventTypes indicates an expected call of ListEventTypes.
func (mr *MockNotificationClientMockRecorder) ListEventTypes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventTypes", reflect.TypeOf((*MockNotificationClient)(nil).ListEventTypes), arg0, arg1)
}

// ListLogs mocks base method.
func (m *MockNotificationClient) ListLogs(arg0 context.Context, arg1 notification.ListLogsArgs) (*[]notification.INotificationDiagnosticLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogs", arg0, arg1)
	ret0, _ := ret[0].(*[]notification.INotificationDiagnosticLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogs indicates an expected call of ListLogs.
func (mr *MockNotificationClientMockRecorder) ListLogs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogs", reflect.TypeOf((*MockNotificationClient)(nil).ListLogs), arg0, arg1)
}

// ListSubscriptions mocks base method.
func (m *MockNotificationClient) ListSubscriptions(arg0 context.Context, arg1 notification.ListSubscriptionsArgs) (*[]notification.NotificationSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", arg0, arg1)
	ret0, _ := ret[0].(*[]notification.NotificationSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockNotificationClientMockRecorder) ListSubscriptions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockNotificationClient)(nil).ListSubscriptions), arg0, arg1)
}

// QuerySubscriptions mocks base method.
func (m *MockNotificationClient) QuerySubscriptions(arg0 context.Context, arg1 notification.QuerySubscriptionsArgs) (*[]notification.NotificationSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySubscriptions", arg0, arg1)
	ret0, _ := ret[0].(*[]notification.NotificationSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySubscriptions indicates an expected call of QuerySubscriptions.
func (mr *MockNotificationClientMockRecorder) QuerySubscriptions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySubscriptions", reflect.TypeOf((*MockNotificationClient)(nil).QuerySubscriptions), arg0, arg1)
}

// UpdateSettings mocks base method.
func (m *MockNotificationClient) UpdateSettings(arg0 context.Context, arg1 notification.UpdateSettingsArgs) (*notification.NotificationAdminSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSettings", arg0, arg1)
	ret0, _ := ret[0].(*notification.NotificationAdminSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSettings indicates an expected call of UpdateSettings.
func (mr *MockNotificationClientMockRecorder) UpdateSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettings", reflect.TypeOf((*MockNotificationClient)(nil).UpdateSettings), arg0, arg1)
}

// UpdateSubscriber mocks base method.
func (m *MockNotificationClient) UpdateSubscriber(arg0 context.Context, arg1 notification.UpdateSubscriberArgs) (*notification.NotificationSubscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriber", arg0, arg1)
	ret0, _ := ret[0].(*notification.NotificationSubscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriber indicates an expected call of UpdateSubscriber.
func (mr *MockNotificationClientMockRecorder) UpdateSubscriber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriber", reflect.TypeOf((*MockNotificationClient)(nil).UpdateSubscriber), arg0, arg1)
}

// UpdateSubscription mocks base method.
func (m *MockNotificationClient) UpdateSubscription(arg0 context.Context, arg1 notification.UpdateSubscriptionArgs) (*notification.NotificationSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", arg0, arg1)
	ret0, _ := ret[0].(*notification.NotificationSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockNotificationClientMockRecorder) UpdateSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockNotificationClient)(nil).UpdateSubscription), arg0, arg1)
}

// UpdateSubscriptionDiagnostics mocks base method.
func (m *MockNotificationClient) UpdateSubscriptionDiagnostics(arg0 context.Context, arg1 notification.UpdateSubscriptionDiagnosticsArgs) (*notification.SubscriptionDiagnostics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionDiagnostics", arg0, arg1)
	ret0, _ := ret[0].(*notification.SubscriptionDiagnostics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionDiagnostics indicates an expected call of UpdateSubscriptionDiagnostics.
func (mr *MockNotificationClientMockRecorder) UpdateSubscriptionDiagnostics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionDiagnostics", reflect.TypeOf((*MockNotificationClient)(nil).UpdateSubscriptionDiagnostics), arg0, arg1)
}

// UpdateSubscriptionUserSettings mocks base method.
func (m *MockNotificationClient) UpdateSubscriptionUserSettings(arg0 context.Context, arg1 notification.UpdateSubscriptionUserSettingsArgs) (*notification.SubscriptionUserSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionUserSettings", arg0, arg1)
	ret0, _ := ret[0].(*notification.SubscriptionUserSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscriptionUserSettings indicates an expected call of UpdateSubscriptionUserSettings.
func (mr *MockNotificationClientMockRecorder) UpdateSubscriptionUserSettings(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionUserSettings", reflect.TypeOf((*MockNotificationClient)(nil).UpdateSubscriptionUserSettings), arg0, arg1)
}
