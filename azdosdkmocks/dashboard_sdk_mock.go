// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/azure-devops-go-api/azuredevops/v7/dashboard (interfaces: Client)

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	reflect "reflect"

	dashboard "github.com/microsoft/azure-devops-go-api/azuredevops/v7/dashboard"
	gomock "go.uber.org/mock/gomock"
)

// MockDashboardClient is a mock of Client interface.
type MockDashboardClient struct {
	ctrl     *gomock.Controller
	recorder *MockDashboardClientMockRecorder
	isgomock struct{}
}

// MockDashboardClientMockRecorder is the mock recorder for MockDashboardClient.
type MockDashboardClientMockRecorder struct {
	mock *MockDashboardClient
}

// NewMockDashboardClient creates a new mock instance.
func NewMockDashboardClient(ctrl *gomock.Controller) *MockDashboardClient {
	mock := &MockDashboardClient{ctrl: ctrl}
	mock.recorder = &MockDashboardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDashboardClient) EXPECT() *MockDashboardClientMockRecorder {
	return m.recorder
}

// CreateDashboard mocks base method.
func (m *MockDashboardClient) CreateDashboard(arg0 context.Context, arg1 dashboard.CreateDashboardArgs) (*dashboard.Dashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDashboard", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.Dashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDashboard indicates an expected call of CreateDashboard.
func (mr *MockDashboardClientMockRecorder) CreateDashboard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDashboard", reflect.TypeOf((*MockDashboardClient)(nil).CreateDashboard), arg0, arg1)
}

// CreateWidget mocks base method.
func (m *MockDashboardClient) CreateWidget(arg0 context.Context, arg1 dashboard.CreateWidgetArgs) (*dashboard.Widget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWidget", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.Widget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWidget indicates an expected call of CreateWidget.
func (mr *MockDashboardClientMockRecorder) CreateWidget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWidget", reflect.TypeOf((*MockDashboardClient)(nil).CreateWidget), arg0, arg1)
}

// DeleteDashboard mocks base method.
func (m *MockDashboardClient) DeleteDashboard(arg0 context.Context, arg1 dashboard.DeleteDashboardArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDashboard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDashboard indicates an expected call of DeleteDashboard.
func (mr *MockDashboardClientMockRecorder) DeleteDashboard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboard", reflect.TypeOf((*MockDashboardClient)(nil).DeleteDashboard), arg0, arg1)
}

// DeleteWidget mocks base method.
func (m *MockDashboardClient) DeleteWidget(arg0 context.Context, arg1 dashboard.DeleteWidgetArgs) (*dashboard.Dashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWidget", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.Dashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWidget indicates an expected call of DeleteWidget.
func (mr *MockDashboardClientMockRecorder) DeleteWidget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWidget", reflect.TypeOf((*MockDashboardClient)(nil).DeleteWidget), arg0, arg1)
}

// GetDashboard mocks base method.
func (m *MockDashboardClient) GetDashboard(arg0 context.Context, arg1 dashboard.GetDashboardArgs) (*dashboard.Dashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboard", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.Dashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboard indicates an expected call of GetDashboard.
func (mr *MockDashboardClientMockRecorder) GetDashboard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboard", reflect.TypeOf((*MockDashboardClient)(nil).GetDashboard), arg0, arg1)
}

// GetDashboardsByProject mocks base method.
func (m *MockDashboardClient) GetDashboardsByProject(arg0 context.Context, arg1 dashboard.GetDashboardsByProjectArgs) (*[]dashboard.Dashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboardsByProject", arg0, arg1)
	ret0, _ := ret[0].(*[]dashboard.Dashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboardsByProject indicates an expected call of GetDashboardsByProject.
func (mr *MockDashboardClientMockRecorder) GetDashboardsByProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboardsByProject", reflect.TypeOf((*MockDashboardClient)(nil).GetDashboardsByProject), arg0, arg1)
}

// GetWidget mocks base method.
func (m *MockDashboardClient) GetWidget(arg0 context.Context, arg1 dashboard.GetWidgetArgs) (*dashboard.Widget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWidget", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.Widget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWidget indicates an expected call of GetWidget.
func (mr *MockDashboardClientMockRecorder) GetWidget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWidget", reflect.TypeOf((*MockDashboardClient)(nil).GetWidget), arg0, arg1)
}

// GetWidgetMetadata mocks base method.
func (m *MockDashboardClient) GetWidgetMetadata(arg0 context.Context, arg1 dashboard.GetWidgetMetadataArgs) (*dashboard.WidgetMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWidgetMetadata", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.WidgetMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWidgetMetadata indicates an expected call of GetWidgetMetadata.
func (mr *MockDashboardClientMockRecorder) GetWidgetMetadata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWidgetMetadata", reflect.TypeOf((*MockDashboardClient)(nil).GetWidgetMetadata), arg0, arg1)
}

// GetWidgetTypes mocks base method.
func (m *MockDashboardClient) GetWidgetTypes(arg0 context.Context, arg1 dashboard.GetWidgetTypesArgs) (*dashboard.WidgetTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWidgetTypes", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.WidgetTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWidgetTypes indicates an expected call of GetWidgetTypes.
func (mr *MockDashboardClientMockRecorder) GetWidgetTypes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWidgetTypes", reflect.TypeOf((*MockDashboardClient)(nil).GetWidgetTypes), arg0, arg1)
}

// GetWidgets mocks base method.
func (m *MockDashboardClient) GetWidgets(arg0 context.Context, arg1 dashboard.GetWidgetsArgs) (*dashboard.WidgetsVersionedList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWidgets", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.WidgetsVersionedList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWidgets indicates an expected call of GetWidgets.
func (mr *MockDashboardClientMockRecorder) GetWidgets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWidgets", reflect.TypeOf((*MockDashboardClient)(nil).GetWidgets), arg0, arg1)
}

// ReplaceDashboard mocks base method.
func (m *MockDashboardClient) ReplaceDashboard(arg0 context.Context, arg1 dashboard.ReplaceDashboardArgs) (*dashboard.Dashboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceDashboard", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.Dashboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceDashboard indicates an expected call of ReplaceDashboard.
func (mr *MockDashboardClientMockRecorder) ReplaceDashboard(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceDashboard", reflect.TypeOf((*MockDashboardClient)(nil).ReplaceDashboard), arg0, arg1)
}

// ReplaceDashboards mocks base method.
func (m *MockDashboardClient) ReplaceDashboards(arg0 context.Context, arg1 dashboard.ReplaceDashboardsArgs) (*dashboard.DashboardGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceDashboards", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.DashboardGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceDashboards indicates an expected call of ReplaceDashboards.
func (mr *MockDashboardClientMockRecorder) ReplaceDashboards(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceDashboards", reflect.TypeOf((*MockDashboardClient)(nil).ReplaceDashboards), arg0, arg1)
}

// ReplaceWidget mocks base method.
func (m *MockDashboardClient) ReplaceWidget(arg0 context.Context, arg1 dashboard.ReplaceWidgetArgs) (*dashboard.Widget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceWidget", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.Widget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceWidget indicates an expected call of ReplaceWidget.
func (mr *MockDashboardClientMockRecorder) ReplaceWidget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceWidget", reflect.TypeOf((*MockDashboardClient)(nil).ReplaceWidget), arg0, arg1)
}

// ReplaceWidgets mocks base method.
func (m *MockDashboardClient) ReplaceWidgets(arg0 context.Context, arg1 dashboard.ReplaceWidgetsArgs) (*dashboard.WidgetsVersionedList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceWidgets", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.WidgetsVersionedList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceWidgets indicates an expected call of ReplaceWidgets.
func (mr *MockDashboardClientMockRecorder) ReplaceWidgets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceWidgets", reflect.TypeOf((*MockDashboardClient)(nil).ReplaceWidgets), arg0, arg1)
}

// UpdateWidget mocks base method.
func (m *MockDashboardClient) UpdateWidget(arg0 context.Context, arg1 dashboard.UpdateWidgetArgs) (*dashboard.Widget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWidget", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.Widget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWidget indicates an expected call of UpdateWidget.
func (mr *MockDashboardClientMockRecorder) UpdateWidget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWidget", reflect.TypeOf((*MockDashboardClient)(nil).UpdateWidget), arg0, arg1)
}

// UpdateWidgets mocks base method.
func (m *MockDashboardClient) UpdateWidgets(arg0 context.Context, arg1 dashboard.UpdateWidgetsArgs) (*dashboard.WidgetsVersionedList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWidgets", arg0, arg1)
	ret0, _ := ret[0].(*dashboard.WidgetsVersionedList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWidgets indicates an expected call of UpdateWidgets.
func (mr *MockDashboardClientMockRecorder) UpdateWidgets(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWidgets", reflect.TypeOf((*MockDashboardClient)(nil).UpdateWidgets), arg0, arg1)
}
