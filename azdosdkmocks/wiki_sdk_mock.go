// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/azure-devops-go-api/azuredevops/v7/wiki (interfaces: Client)

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	io "io"
	reflect "reflect"

	wiki "github.com/microsoft/azure-devops-go-api/azuredevops/v7/wiki"
	gomock "go.uber.org/mock/gomock"
)

// MockWikiClient is a mock of Client interface.
type MockWikiClient struct {
	ctrl     *gomock.Controller
	recorder *MockWikiClientMockRecorder
	isgomock struct{}
}

// MockWikiClientMockRecorder is the mock recorder for MockWikiClient.
type MockWikiClientMockRecorder struct {
	mock *MockWikiClient
}

// NewMockWikiClient creates a new mock instance.
func NewMockWikiClient(ctrl *gomock.Controller) *MockWikiClient {
	mock := &MockWikiClient{ctrl: ctrl}
	mock.recorder = &MockWikiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWikiClient) EXPECT() *MockWikiClientMockRecorder {
	return m.recorder
}

// CreateAttachment mocks base method.
func (m *MockWikiClient) CreateAttachment(arg0 context.Context, arg1 wiki.CreateAttachmentArgs) (*wiki.WikiAttachmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttachment", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiAttachmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttachment indicates an expected call of CreateAttachment.
func (mr *MockWikiClientMockRecorder) CreateAttachment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttachment", reflect.TypeOf((*MockWikiClient)(nil).CreateAttachment), arg0, arg1)
}

// CreateOrUpdatePage mocks base method.
func (m *MockWikiClient) CreateOrUpdatePage(arg0 context.Context, arg1 wiki.CreateOrUpdatePageArgs) (*wiki.WikiPageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdatePage", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiPageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdatePage indicates an expected call of CreateOrUpdatePage.
func (mr *MockWikiClientMockRecorder) CreateOrUpdatePage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdatePage", reflect.TypeOf((*MockWikiClient)(nil).CreateOrUpdatePage), arg0, arg1)
}

// CreatePageMove mocks base method.
func (m *MockWikiClient) CreatePageMove(arg0 context.Context, arg1 wiki.CreatePageMoveArgs) (*wiki.WikiPageMoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePageMove", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiPageMoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePageMove indicates an expected call of CreatePageMove.
func (mr *MockWikiClientMockRecorder) CreatePageMove(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePageMove", reflect.TypeOf((*MockWikiClient)(nil).CreatePageMove), arg0, arg1)
}

// CreateWiki mocks base method.
func (m *MockWikiClient) CreateWiki(arg0 context.Context, arg1 wiki.CreateWikiArgs) (*wiki.WikiV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWiki", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWiki indicates an expected call of CreateWiki.
func (mr *MockWikiClientMockRecorder) CreateWiki(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWiki", reflect.TypeOf((*MockWikiClient)(nil).CreateWiki), arg0, arg1)
}

// DeletePage mocks base method.
func (m *MockWikiClient) DeletePage(arg0 context.Context, arg1 wiki.DeletePageArgs) (*wiki.WikiPageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePage", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiPageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePage indicates an expected call of DeletePage.
func (mr *MockWikiClientMockRecorder) DeletePage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePage", reflect.TypeOf((*MockWikiClient)(nil).DeletePage), arg0, arg1)
}

// DeletePageById mocks base method.
func (m *MockWikiClient) DeletePageById(arg0 context.Context, arg1 wiki.DeletePageByIdArgs) (*wiki.WikiPageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePageById", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiPageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePageById indicates an expected call of DeletePageById.
func (mr *MockWikiClientMockRecorder) DeletePageById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePageById", reflect.TypeOf((*MockWikiClient)(nil).DeletePageById), arg0, arg1)
}

// DeleteWiki mocks base method.
func (m *MockWikiClient) DeleteWiki(arg0 context.Context, arg1 wiki.DeleteWikiArgs) (*wiki.WikiV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWiki", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWiki indicates an expected call of DeleteWiki.
func (mr *MockWikiClientMockRecorder) DeleteWiki(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWiki", reflect.TypeOf((*MockWikiClient)(nil).DeleteWiki), arg0, arg1)
}

// GetAllWikis mocks base method.
func (m *MockWikiClient) GetAllWikis(arg0 context.Context, arg1 wiki.GetAllWikisArgs) (*[]wiki.WikiV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWikis", arg0, arg1)
	ret0, _ := ret[0].(*[]wiki.WikiV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWikis indicates an expected call of GetAllWikis.
func (mr *MockWikiClientMockRecorder) GetAllWikis(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWikis", reflect.TypeOf((*MockWikiClient)(nil).GetAllWikis), arg0, arg1)
}

// GetPage mocks base method.
func (m *MockWikiClient) GetPage(arg0 context.Context, arg1 wiki.GetPageArgs) (*wiki.WikiPageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiPageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockWikiClientMockRecorder) GetPage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockWikiClient)(nil).GetPage), arg0, arg1)
}

// GetPageById mocks base method.
func (m *MockWikiClient) GetPageById(arg0 context.Context, arg1 wiki.GetPageByIdArgs) (*wiki.WikiPageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageById", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiPageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageById indicates an expected call of GetPageById.
func (mr *MockWikiClientMockRecorder) GetPageById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageById", reflect.TypeOf((*MockWikiClient)(nil).GetPageById), arg0, arg1)
}

// GetPageByIdText mocks base method.
func (m *MockWikiClient) GetPageByIdText(arg0 context.Context, arg1 wiki.GetPageByIdTextArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageByIdText", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageByIdText indicates an expected call of GetPageByIdText.
func (mr *MockWikiClientMockRecorder) GetPageByIdText(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageByIdText", reflect.TypeOf((*MockWikiClient)(nil).GetPageByIdText), arg0, arg1)
}

// GetPageByIdZip mocks base method.
func (m *MockWikiClient) GetPageByIdZip(arg0 context.Context, arg1 wiki.GetPageByIdZipArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageByIdZip", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageByIdZip indicates an expected call of GetPageByIdZip.
func (mr *MockWikiClientMockRecorder) GetPageByIdZip(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageByIdZip", reflect.TypeOf((*MockWikiClient)(nil).GetPageByIdZip), arg0, arg1)
}

// GetPageData mocks base method.
func (m *MockWikiClient) GetPageData(arg0 context.Context, arg1 wiki.GetPageDataArgs) (*wiki.WikiPageDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageData", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiPageDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageData indicates an expected call of GetPageData.
func (mr *MockWikiClientMockRecorder) GetPageData(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageData", reflect.TypeOf((*MockWikiClient)(nil).GetPageData), arg0, arg1)
}

// GetPageText mocks base method.
func (m *MockWikiClient) GetPageText(arg0 context.Context, arg1 wiki.GetPageTextArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageText", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageText indicates an expected call of GetPageText.
func (mr *MockWikiClientMockRecorder) GetPageText(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageText", reflect.TypeOf((*MockWikiClient)(nil).GetPageText), arg0, arg1)
}

// GetPageZip mocks base method.
func (m *MockWikiClient) GetPageZip(arg0 context.Context, arg1 wiki.GetPageZipArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageZip", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageZip indicates an expected call of GetPageZip.
func (mr *MockWikiClientMockRecorder) GetPageZip(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageZip", reflect.TypeOf((*MockWikiClient)(nil).GetPageZip), arg0, arg1)
}

// GetPagesBatch mocks base method.
func (m *MockWikiClient) GetPagesBatch(arg0 context.Context, arg1 wiki.GetPagesBatchArgs) (*wiki.GetPagesBatchResponseValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPagesBatch", arg0, arg1)
	ret0, _ := ret[0].(*wiki.GetPagesBatchResponseValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPagesBatch indicates an expected call of GetPagesBatch.
func (mr *MockWikiClientMockRecorder) GetPagesBatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPagesBatch", reflect.TypeOf((*MockWikiClient)(nil).GetPagesBatch), arg0, arg1)
}

// GetWiki mocks base method.
func (m *MockWikiClient) GetWiki(arg0 context.Context, arg1 wiki.GetWikiArgs) (*wiki.WikiV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWiki", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWiki indicates an expected call of GetWiki.
func (mr *MockWikiClientMockRecorder) GetWiki(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWiki", reflect.TypeOf((*MockWikiClient)(nil).GetWiki), arg0, arg1)
}

// UpdatePageById mocks base method.
func (m *MockWikiClient) UpdatePageById(arg0 context.Context, arg1 wiki.UpdatePageByIdArgs) (*wiki.WikiPageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePageById", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiPageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePageById indicates an expected call of UpdatePageById.
func (mr *MockWikiClientMockRecorder) UpdatePageById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePageById", reflect.TypeOf((*MockWikiClient)(nil).UpdatePageById), arg0, arg1)
}

// UpdateWiki mocks base method.
func (m *MockWikiClient) UpdateWiki(arg0 context.Context, arg1 wiki.UpdateWikiArgs) (*wiki.WikiV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWiki", arg0, arg1)
	ret0, _ := ret[0].(*wiki.WikiV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWiki indicates an expected call of UpdateWiki.
func (mr *MockWikiClientMockRecorder) UpdateWiki(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWiki", reflect.TypeOf((*MockWikiClient)(nil).UpdateWiki), arg0, arg1)
}
